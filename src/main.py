from fpdf import FPDF
from fpdf.enums import XPos, YPos

class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
        self.add_font('DejaVu', 'B', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf', uni=True)
        self.add_font('DejaVu', 'I', '/usr/share/fonts/truetype/dejavu/DejaVuSans-Oblique.ttf', uni=True)
        self.set_auto_page_break(auto=True, margin=15)
        self.add_page()
        self.line_height = 6  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏

    def header_block(self, name, city, email, phone, telegram_url=None):
        self.set_font('DejaVu', 'B', 16)
        self.cell(0, 10, name.upper(), ln=True, align='C')

        self.set_font('DejaVu', '', 11)
        self.set_text_color(0, 0, 0)
        self.cell(0, 8, f"{city} ‚Ä¢ {email} ‚Ä¢ {phone}", ln=True, align='C')

        if telegram_url:
            self.set_text_color(0, 0, 255)  # —Å–∏–Ω–∏–π
            self.cell(0, 8, "—Ç–µ–ª–µ–≥—Ä–∞–º–º", ln=True, align='C', link=telegram_url)
            self.set_text_color(0, 0, 0)  # –æ–±—Ä–∞—Ç–Ω–æ –≤ —á—ë—Ä–Ω—ã–π

        self.ln(4)

    def section_title(self, title):
        self.set_font('DejaVu', 'B', 12)
        self.cell(0, 8, title.upper(), ln=True)
        self.line(10, self.get_y(), 200, self.get_y())
        self.ln(3)

    def paragraph(self, text, align='L'):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π paragraph —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        self.set_font('DejaVu', '', 11)
        self.multi_cell(0, self.line_height, text, align=align)
        self.ln(2)
    
    def job_entry(self, title, company, location, dates, bullets):
        self.set_font('DejaVu', 'B', 11)
        self.cell(0, self.line_height, title, new_x=XPos.LMARGIN, new_y=YPos.NEXT)

        self.set_font('DejaVu', 'I', 11)
        self.cell(0, self.line_height, f"{company} ‚Ä¢ {location} ‚Ä¢ {dates}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)

        self.set_font('DejaVu', '', 11)
        for bullet in bullets:
            self.cell(5)  # –æ—Ç—Å—Ç—É–ø
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π multi_cell –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
            x = self.get_x()
            y = self.get_y()
            self.multi_cell(0, self.line_height, f"- {bullet}", new_x=XPos.LMARGIN, new_y=YPos.NEXT)
        self.ln(2)

    def wrap_text(self, text, max_width):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã"""
        words = text.split(' ')
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            if self.get_string_width(test_line) < max_width:
                current_line.append(word)
            else:
                lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        return lines

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
pdf = PDF()

# üîπ –•–µ–¥–µ—Ä
pdf.header_block(
    name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    city="–ú–æ—Å–∫–≤–∞",
    email="example@gmail.com",
    phone="+7 900 999 99 99",
    telegram_url="https://t.me/"
)

# üîπ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
pdf.section_title("Python Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫") # —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
pdf.paragraph(
    "Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –±–æ–ª–µ–µ —á–µ–º 3 –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞ –≤ backend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ —Å—Ñ–µ—Ä–∞—Ö "
    "–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è. –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã, "
    "–≥–æ–ª–æ—Å–æ–≤—ã—Ö –±–æ—Ç–æ–≤ –∏ API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –û–ø—ã—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è CI/CD, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤. "
    "–£–≤–µ—Ä–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é —Å FastAPI, Celery, PostgreSQL, Docker –∏ —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π."
) # –û —Å–µ–±–µ

# üîπ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
pdf.section_title("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")

# –ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
# –µ—Å–ª–∏ –º–µ—Å—Ç –º–Ω–æ–≥–æ, –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ pdf.job_entry(), —Ç–æ–ª—å–∫–æ –Ω–∏–∂–µ
pdf.job_entry(
    "Python Developer", # –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    "OSTEC Group", # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    "–ú–æ—Å–∫–≤–∞", # –≥–æ—Ä–æ–¥
    "–¥–µ–∫–∞–±—Ä—å 2023 ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è", # –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    # —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ä–æ–ª—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏
    [
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Å–∏—Å—Ç–µ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (FastAPI + WebSockets, OpenCV, PyTorch).",
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á (Celery + Redis + RabbitMQ)) –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏.",
        "–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª —Å –Ω—É–ª—è —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: REST API, PostgreSQL, Pydantic, Redis, SqlAlchemy.",
    ]
)



# üîπ –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
pdf.section_title("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
pdf.paragraph(
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π ‚Äî –í–æ—Ä–æ–Ω–µ–∂\n"
    "–ë–∞–∫–∞–ª–∞–≤—Ä, –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî 2023"
)

# üîπ –ù–∞–≤—ã–∫–∏
pdf.section_title("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏")
pdf.paragraph(
    "–Ø–∑—ã–∫–∏: Python, SQL, Bash\n"
    "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: PostgreSQL, MongoDB, Redis, MinIO\n"
    "–§—Ä–µ–π–º–≤–æ—Ä–∫–∏: FastAPI, Django, Flask\n"
    "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Docker, Celery, RabbitMQ, WebSockets, GitLab CI/CD, Pydantic, pytest\n"
    "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: Pandas, OpenCV, PyTorch (CUDA), SQLAlchemy\n"
    "–ö–æ–Ω—Ü–µ–ø—Ü–∏–∏: –û–û–ü, REST API, AsyncIO, DRY, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã, TDD"
)

# üîπ –Ø–∑—ã–∫–∏
pdf.section_title("–Ø–∑—ã–∫–∏")
pdf.paragraph(
    "–†—É—Å—Å–∫–∏–π ‚Äî —Ä–æ–¥–Ω–æ–π\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, —á—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ø–µ—Ä–µ–ø–∏—Å–∫–∞"
)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
pdf.output("/data/–†–µ–∑—é–º–µ_2025.pdf")